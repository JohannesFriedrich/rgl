Notes on Disposable:

Descendant types:  
  Disposable
    Device   - adds DeviceManager
    Window   - adds Device
    
  IDisposeListener
    Device
    DeviceManager
    
Methods for Disposable:

addDisposeListener    :  adds a listener to the list in the Disposable obj 

  called as shown above
  
removeDisposeListener : removes a listener from that list

  called by DeviceManager for each Device, just before 
  calling Device::close.
  
dispose               : calls fireNotifyDisposed

  called by Device::notifyDisposed
  called by Window::close if there's no WindowImpl
  
fireNotifyDisposed    : calls notifyDisposed for each listener

  called by Window::~Window
  also by Window::NotifyDestroy
  
  

Methods for IDisposeListener:

notifyDisposed        : called by Disposable obj

  Device just passes the message up 



When a X11WindowImpl gets a DestroyNotify message:

 - it tells the factory to delete the xwindow via X11GuiFactory::notifyDelete
   - this just removes it from the WindowMap
 - if it has a window, it calls Window::notifyDestroy
   - if it has a child view, it destroys that,
   - then calls fireNotifyDisposed
   
When we call createTestWindow, we just create a device and delete it.
  - Deleting the device just deletes the scene, so our current
    mod calls close first.
  - Device::close calls Window::on_close
  
Window::on_close calls WindowImpl::destroy.  For X11, this triggers the sequence:
  - X11WindowImpl::on_shutdown()
    - this deletes the fonts and calls shutdownGL
      - shutdownGL destroys the GLX context
  - if we have an xdisplay, XDestroyWindow for this xwindow
    and set it to 0.
  - flushX
  - factory::notifyDelete for the xwindow
  - if we have a window, Window::notifyDestroy
    - this deletes the child and calls fireNotifyDisposed.
  - delete the X11WindowImpl
    - if there's an xwindow, this calls X11WindowImple::destroy()
    - if we have xvisualinfo, XFree it.
    
    
Different ways to destroy a window should all end up doing 
the same thing.

1.  Window manager destroys it, and sends DestroyNotify:
     factory->notifyDelete(xwindow)
     if (window) window->notifyDestroy;
     then windowImpl deletes itself.
     
2.  Client sends message to close it (X11 atom or Win32 WM_CLOSE)
     window->on_close()  --> windowImpl->destroy() --> 
       (in X11) run shutdown, ask the system to destroy the xwindow (which gets us into 1)
       (in Windows) 
     
3.  R calls rgl.close:
     rgl_dev_close calls device->close()
     